#+title: Fluent Python Notes
#+author: dragove

* Part I Data Structures
** Chapter 1 The Python Data Model
*** A Pythonic Card Deck
**** Example 1-1 A deck as a sequence of playing cards
#+begin_src python :session card :results silent
  import collections

  Card = collections.namedtuple('Card', ['rank', 'suit'])

  class FrechDeck:
      ranks = [str(n) for n in range(2, 11)] + list('JQKA')
      suits = 'spades diamonds clubs hearts'.split()

      def __init__(self):
          self._cards = [Card(rank, suit) for suit in self.suits
                         for rank in self.ranks]

      def __len__(self):
          return len(self._cards)

      def __getitem__(self, position):
          return self._cards[position]

  deck = FrechDeck()
  #+end_src

Testing card，Named Tuple can be used to construct simple classes with no methods

#+begin_src python :session card :results value :exports both
  beer_card = Card('7', 'diamonds')
  beer_card
#+end_src

#+RESULTS:
: Card(rank='7', suit='diamonds')

Initilizing a frech deck

#+begin_src python :session card :results value :exports both
  deck = FrechDeck()
  len(deck)
#+end_src

#+RESULTS:
: 52

get by indexes or slices

#+begin_src python :session card :results value :exports both
  from random import choice
  choice(deck), deck[:2], deck[12::13]
#+end_src

#+RESULTS:
| Card | (rank= 9 suit= spades) | (Card (rank= 2 suit= spades) Card (rank= 3 suit= spades)) | (Card (rank= A suit= spades) Card (rank= A suit= diamonds) Card (rank= A suit= clubs) Card (rank= A suit= hearts)) |

sorting

#+begin_src python :session card :results value :exports both
  suit_values = dict(spades=3, hearts=2, diamonds=1, clubs=0)
  def spades_high(card):
      rank_value = FrechDeck.ranks.index(card.rank)
      return rank_value * len(suit_values) + suit_values[card.suit]

  sorted(deck, key=spades_high)[0]
  #+end_src

#+RESULTS:
: Card(rank='2', suit='clubs')
**** Example 1-2 Vector
#+begin_src python :session vector
  import math
  class Vector:
      def __init__(self, x=0, y=0):
          self.x = x
          self.y = y

      def __repr__(self):
          return f'Vector({self.x!r} {self.y!r})'

      def __abs__(self):
          return math.hypot(self.x, self.y)

      def __bool__(self):
          return bool(abs(self))

      def __add__(self, other):
          x = self.x + other.x
          y = self.y + other.y
          return Vector(x, y)

      def __mul__(self, scalar):
          return Vector(self.x * scalar, self.y * scalar)
      

  v1, v2 = Vector(1, 2), Vector(3, 4)
  abs(v2), (v1 * 3)
#+end_src

#+RESULTS:
| 5.0 | Vector | (3 6) |

** Chapter 2 An Array of Sequences
#+begin_src python :session localhost :exports both
  symbols = '$¢£¥€¤'
  codes = []
  for symbol in symbols:
      codes.append(ord(symbol))
  codes
#+end_src

#+RESULTS:
| 36 | 162 | 163 | 165 | 8364 | 164 |

can be transferd to

#+begin_src python :session localhost :exports both
  codes = [ord(symbol) for symbol in symbols]
  codes
#+end_src

#+RESULTS:
| 36 | 162 | 163 | 165 | 8364 | 164 |

You can use ~Walrus operator :=~ to access the value inside list comprehension

#+begin_src python :session localhost :exports both
  x = 'ABC'
  codes = [last := ord(c) for c in x]
  last
#+end_src

#+RESULTS:
: 67

Same code result code in map and list comprehension

#+begin_src python :session localhost :exports both
  beyond_ascii = [ord(s) for s in symbols if ord(s) > 127]
  beyond_ascii2 = list(filter(lambda c: c > 127, map(ord, symbols)))
  beyond_ascii, beyond_ascii2
#+end_src

#+RESULTS:
| 162 | 163 | 165 | 8364 | 164 |
| 162 | 163 | 165 | 8364 | 164 |

Pairing things and make a product of two lists

#+begin_src python :session localhost :exports both
  colors = ['black', 'white']
  sizes = ['S', 'M', 'L']
  tshirts = [(color, size) for color in colors for size in sizes]
  tshirts
#+end_src

#+RESULTS:
| black | S |
| black | M |
| black | L |
| white | S |
| white | M |
| white | L |

#+begin_src python :session localhost :exports both
  def match_data(data):
      match data:
        case ['beer', x, y]:
            return x
        case ['gay', x, y]:
            return y
        case _:
            return 13

  match_data(('beer', 3, 4)), match_data(('gay', 6, 9)), match_data((1,))
#+end_src

#+RESULTS:
| 3 | 9 | 13 |

How does slice work

#+begin_src python :session localhost :exports both
  l = [1, 2, 3, 4]
  l[1:3:2], type(l).__getitem__(l, slice(1, 3, 2))
#+end_src

#+RESULTS:
| 2 |
| 2 |

How does slice work in numpy

#+begin_src python :session localhost :exports both
  import numpy as np
  l = np.arange(1, 10).reshape(3, 3)
  l[1: 3, 2], type(l).__getitem__(l, (slice(1, 3, None), 2))
#+end_src

#+RESULTS:
| array | ((6 9)) | array | ((6 9)) |

** Chapter 3 Dictionaries and Sets
*** Making a dict
#+begin_src python :session localhost :exports both
  dial_codes = [
      (880, 'Bangladesh'),
      (55, 'Brazil')
  ]
  cd = {country: code for code, country in dial_codes}
  cd
#+end_src

#+RESULTS:
| Bangladesh | : | 880 | Brazil | : | 55 |
|            |   |     |        |   |    |
*** Mapping unpacking and merging
#+begin_src python :session localhost :exports both
  sample = {'name': 'dove', 'age': 6}
  sample2 = {'cool': True}
  with_unpack = {'goo': 'yeah!', **sample}
  merged = sample | sample2
  with_unpack, merged
#+end_src

#+RESULTS:
| goo  | : | yeah! | name | : | dove | age  | : |    6 |
| name | : | dove  | age  | : |    6 | cool | : | True |
*** Using defaultdict to handle missing key
#+begin_src python :session localhost :exports both
  from collections import defaultdict
  d = defaultdict(list)
  d[3] = 5
  d[2].append(3)
  d[2], d[3]
#+end_src

#+RESULTS:
| (3) | 5 |

** Chapter 4 Unicode Text Versus Bytes
*** Use unicode
#+begin_src python :session localhost :exports both
  s = '我们'
  # string can be converted to bytes and vice versa
  s.encode('utf8').decode('utf8')
  
#+end_src

#+RESULTS:
: 我们
*** Skip Chapter 4
* Part II Functions as Objects
** Chapter 7 Functions as First-Class Objects
#+begin_src python :session localhost :exports both
  def factorial(n):
      return 1 if n < 2 else n * factorial(n - 1)

  factorial(5ca435b), factorial.__doc__, type(factorial)
#+end_src
#+begin_src python :session localhost :exports both
  def factorial(n):
      return 1 if n < 2 else n * factorial(n - 1)

  factorial(5), factorial.__doc__, type(factorial)
#+end_src

#+RESULTS:
| 120 | hline | <class | function | > |

#+begin_src python :session localhost :exports both
  fact = factorial
  type(fact), list(map(fact, range(5)))
#+end_src

#+RESULTS:
| <class | function | > | (1 1 2 6 24) |
*** High-Order Functions
#+begin_src python :session localhost :exports both
  fruits = ['banana', 'dove', 'yue', 'rong', 'I', 'quatumn']
  sorted(fruits, key=len), sorted(fruits, key=lambda word: word[::-1])
#+end_src

#+RESULTS:
| I | yue    | dove | rong | banana | quatumn |
| I | banana | yue  | dove | rong   | quatumn |

#+begin_src python :session localhost :exports both
  from types import FunctionType
  class MyCallable:
      def __call__(self):
          return "hihihi"

  c = MyCallable()
  # c is function-like object
  c(), isinstance(c, FunctionType), callable(c)
#+end_src

#+RESULTS:
| hihihi | False | True |
** Chapter 9 Decorators and Closures
*** Single Dispatch Generic Functions
#+begin_src python :session localhost :exports both
  import html
  def htmlize(obj):
      content = html.escape(repr(obj))
      return f'<pre>{content}</pre>'

  htmlize({1, 2, 3})
#+end_src

#+RESULTS:
: <pre>{1, 2, 3}</pre>

#+begin_src python :session localhost :exports both
  from functools import singledispatch
  from collections import abc
  import fractions
  import decimal
  import html
  import numbers

  def htmlize(obj: object) -> str:
      content = html.escape(repr(obj))
      return f'<pre>{content}</pre>'

  @htmlize.register
  def _(text: str) -> str:
      content = html.escape(text).replace('\n', '<br />\n')
      return f'<p>{content}</p>'

  htmlize('hi')
#+end_src

#+RESULTS:
