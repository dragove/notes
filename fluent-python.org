#+title: Fluent Python Notes
#+author: dragove

* Part I Data Structures
** Chapter 1 The Python Data Model
*** A Pythonic Card Deck
**** Example 1-1 A deck as a sequence of playing cards
#+begin_src jupyter-python :session card :results silent
  import collections

  Card = collections.namedtuple('Card', ['rank', 'suit'])

  class FrechDeck:
      ranks = [str(n) for n in range(2, 11)] + list('JQKA')
      suits = 'spades diamonds clubs hearts'.split()

      def __init__(self):
          self._cards = [Card(rank, suit) for suit in self.suits
                         for rank in self.ranks]

      def __len__(self):
          return len(self._cards)

      def __getitem__(self, position):
          return self._cards[position]

  deck = FrechDeck()
  #+end_src

Testing card，Named Tuple can be used to construct simple classes with no methods

#+begin_src jupyter-python :session card :results value :exports both
  beer_card = Card('7', 'diamonds')
  beer_card
#+end_src

#+RESULTS:
: Card(rank='7', suit='diamonds')

Initilizing a frech deck

#+begin_src jupyter-python :session card :results value :exports both
  deck = FrechDeck()
  len(deck)
#+end_src

#+RESULTS:
: 52

get by indexes or slices

#+begin_src jupyter-python :session card :results value :exports both
  from random import choice
  choice(deck), deck[:2], deck[12::13]
#+end_src

#+RESULTS:
| Card | (rank= 9 suit= spades) | (Card (rank= 2 suit= spades) Card (rank= 3 suit= spades)) | (Card (rank= A suit= spades) Card (rank= A suit= diamonds) Card (rank= A suit= clubs) Card (rank= A suit= hearts)) |

sorting

#+begin_src jupyter-python :session card :results value :exports both
  suit_values = dict(spades=3, hearts=2, diamonds=1, clubs=0)
  def spades_high(card):
      rank_value = FrechDeck.ranks.index(card.rank)
      return rank_value * len(suit_values) + suit_values[card.suit]

  sorted(deck, key=spades_high)[0]
  #+end_src

#+RESULTS:
: Card(rank='2', suit='clubs')
**** Example 1-2 Vector
#+begin_src jupyter-python :session vector
  import math
  class Vector:
      def __init__(self, x=0, y=0):
          self.x = x
          self.y = y

      def __repr__(self):
          return f'Vector({self.x!r} {self.y!r})'

      def __abs__(self):
          return math.hypot(self.x, self.y)

      def __bool__(self):
          return bool(abs(self))

      def __add__(self, other):
          x = self.x + other.x
          y = self.y + other.y
          return Vector(x, y)

      def __mul__(self, scalar):
          return Vector(self.x * scalar, self.y * scalar)
      

  v1, v2 = Vector(1, 2), Vector(3, 4)
  abs(v2), (v1 * 3)
#+end_src

#+RESULTS:
| 5.0 | Vector | (3 6) |

** Chapter 2 An Array of Sequences
#+begin_src jupyter-python :session localhost :exports both
  symbols = '$¢£¥€¤'
  codes = []
  for symbol in symbols:
      codes.append(ord(symbol))
  codes
#+end_src

#+RESULTS:
| 36 | 162 | 163 | 165 | 8364 | 164 |

can be transferd to

#+begin_src jupyter-python :session localhost :exports both
  codes = [ord(symbol) for symbol in symbols]
  codes
#+end_src

#+RESULTS:
| 36 | 162 | 163 | 165 | 8364 | 164 |

You can use ~Walrus operator :=~ to access the value inside list comprehension

#+begin_src jupyter-python :session localhost :exports both
  x = 'ABC'
  codes = [last := ord(c) for c in x]
  last
#+end_src

#+RESULTS:
: 67

Same code result code in map and list comprehension

#+begin_src jupyter-python :session localhost :exports both
  beyond_ascii = [ord(s) for s in symbols if ord(s) > 127]
  beyond_ascii2 = list(filter(lambda c: c > 127, map(ord, symbols)))
  beyond_ascii, beyond_ascii2
#+end_src

#+RESULTS:
| 162 | 163 | 165 | 8364 | 164 |
| 162 | 163 | 165 | 8364 | 164 |

Pairing things and make a product of two lists

#+begin_src jupyter-python :session localhost :exports both
  colors = ['black', 'white']
  sizes = ['S', 'M', 'L']
  tshirts = [(color, size) for color in colors for size in sizes]
  tshirts
#+end_src

#+RESULTS:
| black | S |
| black | M |
| black | L |
| white | S |
| white | M |
| white | L |

#+begin_src jupyter-python :session localhost :exports both
  def match_data(data):
      match data:
        case ['beer', x, y]:
            return x
        case ['gay', x, y]:
            return y
        case _:
            return 13

  match_data(('beer', 3, 4)), match_data(('gay', 6, 9)), match_data((1,))
#+end_src

#+RESULTS:
| 3 | 9 | 13 |

How does slice work

#+begin_src jupyter-python :session localhost :exports both
  l = [1, 2, 3, 4]
  l[1:3:2], type(l).__getitem__(l, slice(1, 3, 2))
#+end_src

#+RESULTS:
| 2 |
| 2 |

How does slice work in numpy

#+begin_src jupyter-python :session localhost :exports both
  import numpy as np
  l = np.arange(1, 10).reshape(3, 3)
  l[1: 3, 2], type(l).__getitem__(l, (slice(1, 3, None), 2))
#+end_src

#+RESULTS:
| array | ((6 9)) | array | ((6 9)) |

** Chapter 3 Dictionaries and Sets


